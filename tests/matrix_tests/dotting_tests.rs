#[cfg(test)]
mod tests {
    use gpu_math::{GpuMath, matrix::Matrix};

    #[test]
    fn test_matrix_dotting() {
        let gpu_math = GpuMath::new();

        let mat1 = Matrix::new(
            &gpu_math,
            (3, 3),
            Some(vec![0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]),
        )
        .expect("Failed");

        let mat2 = Matrix::new(
            &gpu_math,
            (3, 3),
            Some(vec![0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]),
        )
        .expect("Failed");

        let dest = Matrix::new(&gpu_math, (3, 3), None).expect("Failed");
        // let dest = Matrix::new((16, 16), None).expect("Failed");
        // let dest = Matrix::new(&gpu_math, (GROUP_SIZE_2 as u32, GROUP_SIZE_2 as u32), None)
        // .expect("Failed");

        Matrix::dot(&mat1, &mat2, &dest).expect("Failed");

        let expected = Matrix::new(
            &gpu_math,
            (3, 3),
            Some(vec![15.0, 18.0, 21.0, 42.0, 54.0, 66.0, 69.0, 90.0, 111.0]),
        )
        .expect("Failed");

        println!("mat1: {}", mat1);
        println!("mat2: {}", mat2);
        println!("dest: {}", dest);
        println!("expe: {}", expected);

        assert_eq!(dest, expected);
    }

    #[test]
    fn test_matrix_dotting_big() {
        let gpu_math = GpuMath::new();

        let mat1 = Matrix::new(
            &gpu_math,
            (1000, 1000),
            Some({
                let mut vec = Vec::with_capacity(1000 * 1000);
                for _ in 0..1000 {
                    for j in 0..1000 {
                        vec.push(j as f32);
                    }
                }
                vec
            }),
        )
        .expect("Failed");

        let mat2 = Matrix::new(
            &gpu_math,
            (1000, 1000),
            Some({
                let mut vec = Vec::with_capacity(1000 * 1000);
                for _ in 0..1000 {
                    for j in 0..1000 {
                        vec.push(j as f32);
                    }
                }
                vec
            }),
        )
        .expect("Failed");

        let dest = Matrix::new(&gpu_math, (1000, 1000), None).expect("Failed");

        Matrix::dot(&mat1, &mat2, &dest).expect("Failed");

        let expected = Matrix::new(
            &gpu_math,
            (1000, 1000),
            Some({
                let row = vec![
                    0, 499500, 999000, 1498500, 1998000, 2497500, 2997000, 3496500, 3996000,
                    4495500, 4995000, 5494500, 5994000, 6493500, 6993000, 7492500, 7992000,
                    8491500, 8991000, 9490500, 9990000, 10489500, 10989000, 11488500, 11988000,
                    12487500, 12987000, 13486500, 13986000, 14485500, 14985000, 15484500, 15984000,
                    16483500, 16983000, 17482508, 17982000, 18481476, 18981000, 19480536, 19980000,
                    20479452, 20979000, 21478556, 21978000, 22477432, 22977000, 23476576, 23976000,
                    24475416, 24975000, 25474592, 25974000, 26473400, 26973000, 27472608, 27972000,
                    28471384, 28971000, 29470620, 29970000, 30469372, 30969000, 31468632, 31968000,
                    32467360, 32967000, 33466644, 33966000, 34465348, 34965016, 35464656, 35964000,
                    36463344, 36962950, 37462660, 37962000, 38461332, 38961070, 39460670, 39960000,
                    40459330, 40958904, 41458676, 41958000, 42457316, 42957110, 43456690, 43956000,
                    44455310, 44954864, 45454692, 45954000, 46453300, 46953150, 47452696, 47952000,
                    48451296, 48950830, 49450708, 49950000, 50449292, 50949184, 51448710, 51948000,
                    52447290, 52946800, 53446716, 53946000, 54445284, 54945216, 55444720, 55944000,
                    56443270, 56942770, 57442724, 57942000, 58441268, 58941240, 59440730, 59940000,
                    60439264, 60938744, 61438732, 61938000, 62437260, 62937264, 63436736, 63936000,
                    64435256, 64934720, 65434740, 65934000, 66433252, 66933290, 67432740, 67932000,
                    68431256, 68930696, 69430744, 69930030, 70429240, 70929310, 71428744, 71928000,
                    72427240, 72926690, 73426760, 73925900, 74425256, 74925320, 75424760, 75924000,
                    76423240, 76922664, 77422760, 77922140, 78421240, 78921340, 79420760, 79920000,
                    80419240, 80918660, 81418776, 81917810, 82417224, 82917350, 83416776, 83916000,
                    84415224, 84914630, 85414776, 85914220, 86413224, 86913380, 87412760, 87912000,
                    88411224, 88910620, 89410776, 89909730, 90409224, 90909384, 91408776, 91908000,
                    92407224, 92906600, 93406790, 93906300, 94405210, 94905390, 95404776, 95904000,
                    96403210, 96902590, 97402790, 97901660, 98401210, 98901416, 99400776, 99900000,
                    100399210, 100898584, 101398790, 101898370, 102397210, 102897420, 103396776,
                    103896000, 104395210, 104894580, 105394790, 105893600, 106393210, 106893430,
                    107392790, 107892000, 108391210, 108890570, 109390810, 109890430, 110389190,
                    110889440, 111388790, 111888000, 112387210, 112886540, 113386810, 113885540,
                    114385190, 114885450, 115384810, 115884000, 116383190, 116882536, 117382810,
                    117882480, 118381190, 118881460, 119380790, 119880000, 120379190, 120878530,
                    121378810, 121877490, 122377190, 122877464, 123376810, 123876000, 124375190,
                    124874520, 125374810, 125874530, 126373190, 126873470, 127372810, 127872000,
                    128371190, 128870510, 129370824, 129869440, 130369190, 130869480, 131368810,
                    131868000, 132367190, 132866504, 133366810, 133866580, 134365180, 134865470,
                    135364850, 135864000, 136363170, 136862510, 137362820, 137861390, 138361180,
                    138861490, 139360830, 139860060, 140359200, 140858480, 141358820, 141858620,
                    142357180, 142857490, 143356800, 143856000, 144355170, 144854480, 145354820,
                    145853380, 146353180, 146853520, 147352800, 147851800, 148351170, 148850510,
                    149350820, 149850640, 150349180, 150849520, 151348830, 151848000, 152347170,
                    152846480, 153346820, 153845330, 154345180, 154845520, 155344800, 155844290,
                    156343170, 156842480, 157342820, 157842690, 158341180, 158841520, 159340830,
                    159840000, 160339170, 160838480, 161338820, 161837310, 162337180, 162837550,
                    163336830, 163835620, 164335170, 164834450, 165334820, 165834700, 166333180,
                    166833550, 167332860, 167832000, 168331140, 168830450, 169330780, 169829260,
                    170329180, 170829550, 171328830, 171828450, 172327170, 172826450, 173326820,
                    173826750, 174325180, 174825520, 175324830, 175824000, 176323170, 176822450,
                    177322820, 177821250, 178321180, 178821550, 179320830, 179819460, 180319170,
                    180818450, 181318820, 181818770, 182317180, 182817550, 183316830, 183816000,
                    184315140, 184814450, 185314820, 185813200, 186313180, 186813580, 187312830,
                    187812600, 188311170, 188810420, 189310820, 189810780, 190309150, 190809550,
                    191308860, 191808000, 192307140, 192806420, 193306820, 193805180, 194305150,
                    194805580, 195304830, 195803330, 196303170, 196802420, 197302850, 197802830,
                    198301180, 198801550, 199300860, 199800000, 200299140, 200798420, 201298850,
                    201797170, 202297150, 202797580, 203296860, 203796740, 204295170, 204794420,
                    205294850, 205794850, 206293150, 206793550, 207292860, 207792000, 208291140,
                    208790420, 209290850, 209789150, 210289180, 210789580, 211288860, 211787200,
                    212287170, 212786420, 213286850, 213786860, 214285150, 214785580, 215284860,
                    215784000, 216283140, 216782420, 217282850, 217781140, 218281150, 218781620,
                    219280860, 219780860, 220279140, 220778380, 221278850, 221778880, 222277150,
                    222777580, 223276830, 223776000, 224275140, 224774420, 225274850, 225773090,
                    226273150, 226773620, 227272830, 227771070, 228271140, 228770380, 229270850,
                    229770900, 230269150, 230769620, 231268830, 231768000, 232267170, 232766380,
                    233266850, 233765070, 234265150, 234765620, 235264860, 235764960, 236263170,
                    236762380, 237262850, 237762910, 238261150, 238761580, 239260860, 239760000,
                    240259140, 240758380, 241258850, 241757060, 242257150, 242757620, 243256860,
                    243754980, 244255140, 244754380, 245254850, 245754930, 246253150, 246753620,
                    247252860, 247752000, 248251140, 248750380, 249250850, 249749040, 250249150,
                    250749620, 251248830, 251749060, 252247170, 252746380, 253246850, 253746940,
                    254245150, 254745620, 255244900, 255744000, 256243100, 256742380, 257242850,
                    257741020, 258241150, 258741650, 259240830, 259738880, 260239140, 260738380,
                    261238850, 261738960, 262237150, 262737620, 263236860, 263736000, 264235140,
                    264734380, 265234850, 265733010, 266233120, 266733620, 267232860, 267733150,
                    268231140, 268730370, 269230850, 269730940, 270229150, 270729700, 271228900,
                    271728000, 272227100, 272726340, 273226800, 273725020, 274225150, 274725630,
                    275224860, 275722780, 276223170, 276722370, 277222850, 277722980, 278221150,
                    278721660, 279220860, 279720130, 280219170, 280718400, 281218850, 281716960,
                    282217150, 282717630, 283216860, 283717250, 284215140, 284714370, 285214820,
                    285714980, 286213150, 286713600, 287212830, 287712000, 288211170, 288710340,
                    289210850, 289708960, 290209180, 290709630, 291208860, 291706750, 292207140,
                    292706370, 293206850, 293707040, 294205120, 294705600, 295204900, 295703600,
                    296203170, 296702340, 297202800, 297701020, 298201150, 298701630, 299200860,
                    299701280, 300199140, 300698370, 301198820, 301699040, 302197150, 302697660,
                    303196770, 303696000, 304195170, 304694340, 305194850, 305692960, 306193120,
                    306693630, 307192860, 307690660, 308191140, 308690370, 309190850, 309691040,
                    310189120, 310689600, 311188830, 311688580, 312187170, 312686340, 313186880,
                    313684960, 314185150, 314685630, 315184860, 315685380, 316183140, 316682370,
                    317182820, 317683040, 318181150, 318681660, 319180770, 319680000, 320179230,
                    320678340, 321178850, 321676960, 322177120, 322677630, 323176860, 323674620,
                    324175140, 324674370, 325174900, 325675100, 326173200, 326673660, 327172900,
                    327671230, 328171100, 328670340, 329170880, 329668900, 330169150, 330669630,
                    331168860, 331669400, 332167140, 332666370, 333166880, 333667100, 334165150,
                    334665730, 335164830, 335664000, 336163170, 336662270, 337162850, 337660900,
                    338161120, 338661570, 339160860, 339658530, 340159140, 340658370, 341158850,
                    341659100, 342157120, 342657660, 343156830, 343656900, 344155170, 344654340,
                    345154880, 345652900, 346153100, 346653630, 347152860, 347653500, 348151140,
                    348650370, 349150880, 349651040, 350149150, 350649660, 351148830, 351648000,
                    352147170, 352646340, 353146850, 353644900, 354145120, 354645630, 355144860,
                    355642500, 356143140, 356642370, 357142850, 357643100, 358141120, 358641660,
                    359140830, 359638900, 360139170, 360638340, 361138880, 361636900, 362137150,
                    362637630, 363136860, 363637540, 364135140, 364634370, 365134880, 365635100,
                    366133150, 366633660, 367132830, 367632000, 368131170, 368630270, 369130850,
                    369628900, 370129120, 370629630, 371128800, 371626400, 372127140, 372626370,
                    373126900, 373627170, 374125120, 374625660, 375124830, 375625200, 376123170,
                    376622340, 377122880, 377620830, 378121150, 378621630, 379120860, 379621570,
                    380119140, 380618300, 381118880, 381619100, 382117100, 382617730, 383116900,
                    383616000, 384115100, 384614270, 385114850, 385612830, 386113120, 386613630,
                    387112860, 387610370, 388111140, 388610300, 389110850, 389611170, 390109200,
                    390609660, 391108830, 391606660, 392107170, 392606340, 393106880, 393604830,
                    394105150, 394605700, 395104860, 395605660, 396103140, 396602370, 397102820,
                    397603100, 398101150, 398601730, 399100830, 399600000, 400099230, 400598270,
                    401098850, 401596830, 402097120, 402597700, 403096860, 403594340, 404095140,
                    404594300, 405094900, 405595170, 406093120, 406593730, 407092830, 407593470,
                    408091100, 408590340, 409090880, 409588830, 410089150, 410589700, 411088860,
                    411589700, 412087140, 412586300, 413086880, 413587100, 414085100, 414585730,
                    415084830, 415584000, 416083170, 416582270, 417082850, 417580830, 418081120,
                    418581700, 419080860, 419578300, 420079140, 420578370, 421078850, 421579170,
                    422077120, 422577730, 423076830, 423574400, 424075170, 424574340, 425074880,
                    425572830, 426073150, 426573700, 427072860, 427573730, 428071140, 428570300,
                    429070820, 429571170, 430069150, 430569730, 431068830, 431568000, 432067170,
                    432566270, 433066850, 433564830, 434065120, 434565700, 435064860, 435562270,
                    436063140, 436562300, 437062900, 437563230, 438061120, 438561730, 439060830,
                    439561730, 440059170, 440558270, 441058880, 441556770, 442057150, 442557700,
                    443056930, 443557760, 444055140, 444554300, 445054880, 445555170, 446053150,
                    446553660, 447052900, 447552000, 448051100, 448550270, 449050900, 449548830,
                    450049120, 450549700, 451048860, 451546180, 452047140, 452546300, 453046850,
                    453547230, 454045120, 454545660, 455044830, 455542140, 456043170, 456542270,
                    457042880, 457540770, 458041150, 458541700, 459040860, 459541800, 460039140,
                    460538300, 461038880, 461539230, 462037100, 462537660, 463036900, 463536000,
                    464035100, 464534340, 465034850, 465532770, 466033180, 466533700, 467032860,
                    467530140, 468031140, 468530300, 469030850, 469531230, 470029200, 470529730,
                    471028830, 471529920, 472027170, 472526340, 473026880, 473524770, 474025100,
                    474525700, 475024860, 475525820, 476023140, 476522300, 477022880, 477523170,
                    478021150, 478521730, 479020830, 479520000, 480019100, 480518270, 481018850,
                    481516770, 482017120, 482517700, 483016860, 483514100, 484015140, 484514300,
                    485014850, 485515230, 486013120, 486513730, 487012900, 487509950, 488011100,
                    488510270, 489010880, 489508770, 490009150, 490509700, 491008860, 491509860,
                    492007140, 492506300, 493006880, 493507230, 494005150, 494505730, 495004900,
                    495504000, 496003100, 496502270, 497002850, 497500770, 498001120, 498501700,
                    499000860,
                ]
                .into_iter()
                .map(|v| v as f32)
                .collect::<Vec<f32>>();

                let mut outer_vec = Vec::with_capacity(1000 * 1000);

                for _ in 0..1000 {
                    outer_vec.append(&mut row.clone());
                }

                outer_vec
            }),
        )
        .expect("Failed");

        // println!("dest: {}", dest);
        // println!("expe: {}", expected);

        assert_eq!(dest, expected);
    }
}
